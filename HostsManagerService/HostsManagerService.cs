using HostsManagerConfigurationTool;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.ServiceProcess;
using System.Text;
using System.Threading;

namespace HostsManagerService
{
    public partial class HostsManagerService : ServiceBase
    {
        private StreamWriter log;
        private StreamReader configFile;
        private System.Timers.Timer serverTimer;
        private System.Timers.Timer configTimer;
        private Config config;
        private TcpListener tl;
        private Thread accept;
        private System.Timers.Timer suspendTimer;
        private DateTime lastChanged;

        public static bool avaliable = false;
        
        public HostsManagerService()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                if (!Directory.Exists("C:\\HostsManager")) Directory.CreateDirectory("C:\\HostsManager");
                if (!File.Exists("C:\\HostsManager\\config.json"))
                {
                    wlog("E", "Config file not found. Suspending...");
                    suspendTimer = new System.Timers.Timer(1000 * 10);
                    suspendTimer.Elapsed += suspend;
                    suspendTimer.Start();
                    return;
                }
                config = JsonConvert.DeserializeObject<Config>(File.ReadAllText("C:\\HostsManager\\config.json"));
                serverTimer = new System.Timers.Timer(1000 * 150);
                configTimer = new System.Timers.Timer(1000 * 100);
                wlog("I", "Service started.");
                serverTimer.Elapsed += time;
                serverTimer.Start();
                configTimer.Elapsed += cUpdate;
                configTimer.Start();
                avaliable = true;
                tl = new TcpListener(IPAddress.Any, 8885);
                tl.Start();
                accept = new Thread(accepter);
                accept.Start();
            }
            catch(Exception exc)
            {
                System.Windows.Forms.MessageBox.Show(exc.Message);
                if (!Directory.Exists("C:\\HostsManager")) Directory.CreateDirectory("C:\\HostsManager");
                log = new StreamWriter("C:\\HostsManager\\hmservice.log", true);
                log.Write(exc);
                log.Close();
            }
        }

        private void suspend(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (File.Exists("C:\\HostsManager\\config.json"))
            {
                suspendTimer.Stop();
                OnStart(null);
            }
        }

        protected override void OnStop()
        {
            wlog("I", "Service stopped.");
        }

        public void time(object source, System.Timers.ElapsedEventArgs e)
        {
            if((config.lastChecked + TimeSpan.FromDays(config.updateTimeDay)) <= DateTime.UtcNow)
            {
                sUpdate();
            }
        }

        public void cUpdate(object source, System.Timers.ElapsedEventArgs e)
        {
            try
            {
                Config json = JsonConvert.DeserializeObject<Config>(File.ReadAllText("C:\\HostsManager\\config.json"));
                if(config.lastChecked.CompareTo(json.lastChecked) != 0 || e == null)
                {
                    config = json;
                    StringBuilder hosts = new StringBuilder();
                    hosts.AppendLine("#Hosts Database:Generated by HostsManager-Don't modify\n");
                    foreach (Config.Sequence seq in config.currentCustoms)
                    {
                        if (seq.enabled)
                        {
                            hosts.AppendLine("#CustomSequence-" + seq.name + "-Begin\n");
                            foreach (Config.Entry ent in seq.entries)
                            {
                                if (ent.enabled)
                                {
                                    hosts.AppendLine(ent.ip + " " + ent.domain);
                                }
                            }
                            hosts.AppendLine("#CustomSequence-" + seq.name + "-End\n");
                        }
                    }
                    foreach (string s in config.updateSource)
                    {
                        StreamReader sf = new StreamReader("C:\\HostsManager\\" + s + ".json");
                        Source src = JsonConvert.DeserializeObject<Source>(sf.ReadToEnd());
                        sf.Close();
                        hosts.AppendLine("#ServerUpdateSequence-" + src.name + "-Begin\n");
                        foreach (Config.Sequence seq in src.current)
                        {
                            foreach (Config.Entry ent in seq.entries)
                            {
                                hosts.AppendLine(ent.ip + " " + ent.domain);
                            }
                        }
                        hosts.AppendLine("#ServerUpdateSequence-" + src.name + "-End\n");
                    }
                    File.WriteAllText("C:\\Windows\\System32\\drivers\\etc\\hosts", hosts.ToString());
                    //cuConfig = j;
                    wlog("I", "Config updated.");
                }
            }catch(Exception exc)
            {
                wlog("E", exc + exc.StackTrace);
            }
        }

        public void wlog(string status, string msg)
        {
            log = new StreamWriter("C:\\HostsManager\\hmservice.log", true);
            log.WriteLine("[" + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss") + "] [" + status + "] [HostsManagerService] " + msg);
            log.Close();
        }

        public void accepter()
        {
            while (true)
            {
                TcpClient cl = tl.AcceptTcpClient();
                new Thread(new ParameterizedThreadStart(doProcess)).Start(cl);
            }
        }

        private void sUpdate()
        {
            if (DateTime.Compare(config.lastChecked.AddDays(config.updateTimeDay), DateTime.Now) <= 0)
            {
                foreach (string s in config.updateSource)
                {
                    try
                    {
                        StreamReader o = new StreamReader("C:\\HostsManager\\" + s + ".json");
                        Source origin = JsonConvert.DeserializeObject<Source>(o.ReadToEnd());
                        o.Close();
                        HttpWebRequest hwr = WebRequest.CreateHttp(origin.address);
                        hwr.Method = "GET";
                        HttpWebResponse resp = hwr.GetResponse() as HttpWebResponse;
                        if (resp.ContentLength > 0 && resp.StatusCode == HttpStatusCode.OK && resp.ContentType == "application/json")
                        {
                            string str;
                            string current = File.ReadAllText("C:\\HostsManager\\" + s + ".json");
                            //string enc = resp.ContentEncoding;
                            using (StreamReader wreader = new StreamReader(resp.GetResponseStream(), Encoding.UTF8))
                            {
                                str = wreader.ReadToEnd();
                            }
                            if (JsonConvert.DeserializeObject<Source>(str).version > JsonConvert.DeserializeObject<Source>(current).version)
                            {
                                File.WriteAllText("C:\\HostsManager\\" + s + ".json", str);
                                cUpdate(null, null);
                                wlog("I", "Server data updated.");
                            }
                        }
                        else if (resp.StatusCode == HttpStatusCode.NotFound)
                        {
                            wlog("E", "404:" + s);
                        }
                        else
                        {
                            wlog("E", resp.StatusCode + ":" + s);
                        }
                        resp.Close();
                    }
                    catch (Exception e)
                    {
                        wlog("E", e + e.StackTrace);
                    }
                }
            }
        }

        private void doProcess(object cl)
        {
            StreamReader reader = new StreamReader(((TcpClient)cl).GetStream());
            string cmd = reader.ReadToEnd();
            if (cmd == "supdate")
            {
                sUpdate();
            }
            else if (cmd == "cupdate")
            {
                cUpdate(null, null);
            }
        }
    }
}
